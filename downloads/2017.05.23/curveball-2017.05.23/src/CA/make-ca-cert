#!/bin/sh
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contract No. N66001-11-C-4017.
#
# Copyright 2014 - Raytheon BBN Technologies Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.

# READ THESE INSTRUCTIONS FIRST
#
# A quick script to create an experimental certificate authority (using
# a self-signed cert) for use by Curveball.  This CA is not intended
# to be secure: it uses a self-signed certificate with no passphrase!
# It is meant only as a proof of concept, to generate placeholder
# certificates for experiments in a safe, sheltered environment.
#
# Tries to avoid re-creating the key or the cert based on that key.
# Will use intermediate files instead of re-creating them, so if you
# want something new, remove current files first.
#
# usage: ./make-ca-cert
#
# NOTE: after changing the CA cert, you MUST run
# ../packaging/create-certdb in order to update the certdb
# files used by the client (for the testbed).  You should use
# create-certdb and then commit any changes to the certdb
# directory along with changes to the CA certificate.


RSA_KEYSIZE=4096	# adjust as necessary
LIFETIME_DAYS=1461	# four years
CERT_DIR=./CA
CA_CONF=curveball_ca.cnf
CA_SECRET=curveball-superdooper-secret

# Files created by this script.
CA_KEY=${CERT_DIR}/CURVEBALL_CA.key
CA_CERT=${CERT_DIR}/CURVEBALL_CA.pem

create_ca_key() {

    echo "Creating ${CA_KEY}..."

    rm -f "${CA_KEY}".tmp
    openssl genrsa -passout "pass:${CA_SECRET}" \
		-des3 -out "${CA_KEY}".tmp ${RSA_KEYSIZE}
    rc=$?
    if [ $rc -ne 0 ]; then
	echo "ERROR: could not create CA key."
	exit 1
    fi

    # This creates a version of the key that doesn't require a passphrase.
    #
    # This is exactly the sort of thing a real CA wouldn't be caught doing.
    #
    openssl rsa -passin "pass:${CA_SECRET}" \
	    -in "${CA_KEY}.tmp" -out "${CA_KEY}"
    rc=$?
    rm -f "${CA_KEY}".tmp

    if [ $rc -ne 0 ]; then
	echo "ERROR: Could not remove passphrase from key"
	exit 1
    fi

    return 0
}

create_ca_cert() {

    # Create the cert:
    openssl req -new -x509 -config "${CA_CONF}"  \
	    -sha256 \
	    -days "${LIFETIME_DAYS}" \
	    -key "${CA_KEY}" -out "${CA_CERT}"
    if [ $? -ne 0 ]; then
	echo "ERROR: Could not create the cert"
	exit 1
    fi
}

# If we create a new key, then we MUST create a new CA cert.
#

if [ ! -d "${CERT_DIR}" ]; then
    mkdir -p "${CERT_DIR}"
fi

if [ ! -e "${CA_KEY}" ]; then
    echo "CREATING NEW CA KEY AND CERT"
    create_ca_key
    create_ca_cert
elif [ ! -e "${CA_CERT}" ]; then
    echo "CREATING NEW CA CERT"
    create_ca_cert
fi

exit 0
