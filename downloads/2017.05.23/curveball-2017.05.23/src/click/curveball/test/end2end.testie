/*
 * This material is based upon work supported by the Defense Advanced
 * Research Projects Agency under Contract No. N66001-11-C-4017.
 *
 * Copyright 2014 - Raytheon BBN Technologies Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */

%info
End-to-end DR testing.

%script
click TCPDUMP_CONFIG -h c1.count -h c2.count > OUT1

%file TCPDUMP_CONFIG
require(package "curveball");

elementclass CurveballDR {
  $pathname, $load_sentinels |

  socket_test		:: SocketTest(PATH $pathname,
                                      SENTINELS $load_sentinels)
  decoder_test		:: DecoderTest()

  ip_classifier 	:: IPClassifier(dst tcp port 4433,
                                        dst tcp port 80, -)
  dr2dp_encoder		:: DR2DPEncoder()
  dr2dp_decoder		:: DR2DPDecoder(
                               DETECTOR tls_flow_detector,
                               DETECTOR http_flow_detector,
                               FILTER_FILENAME ../misc/sentinels-19.sbf)
  tls_flow_detector	:: TLSFlowDetector(PORT 4433,
                                           SENTINEL "\xDE\xAD\xBE\xEF",
                                           ENCODER dr2dp_encoder)
  http_flow_detector	:: HTTPFlowDetector(ENCODER dr2dp_encoder)
  decoy_proxy		:: Socket(UNIX, $pathname, CLIENT true)

  input -> Strip(14)
	-> ip_classifier;

  ip_classifier[0]
	-> CheckIPHeader()
	-> tls_flow_detector;

  ip_classifier[1]
	-> CheckIPHeader()
	-> http_flow_detector;

  Idle -> [1]tls_flow_detector;
  tls_flow_detector[0] -> dr2dp_encoder -> decoy_proxy;
  tls_flow_detector[1] -> output;
  tls_flow_detector[2] -> Discard;

  Idle -> [1]http_flow_detector;
  http_flow_detector[0] -> dr2dp_encoder -> decoy_proxy;
  http_flow_detector[1] -> output;
  http_flow_detector[2] -> Discard;

  ip_classifier[2] -> output;

  decoy_proxy
	-> dr2dp_decoder
	-> CheckIPHeader()
	-> output;

  socket_test
	-> decoder_test
	-> socket_test;
}

tls_basic :: FromDump(../misc/curveball-capture.tcpdump,
                      ACTIVE false, STOP true, FORCE_IP true)
	-> c1 :: Counter
	-> dr1:: CurveballDR("./tls-basic.socket", false)
	-> c2 :: Counter
	-> Discard;

DriverManager(
        write tls_basic.active true,
        wait_stop,
        wait 2,
)

%expect stderr
SentinelDetector::sentinel_packet: packet contains valid sentinel
DecoderTest::parse: redirect message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received
DecoderTest::parse: forward message received

%expect OUT1
c1.count:
85
c2.count:
85
