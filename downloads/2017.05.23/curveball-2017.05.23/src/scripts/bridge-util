#!/usr/bin/env python
#
# This material is funded in part by a grant from the United States
# Department of State. The opinions, findings, and conclusions stated
# herein are those of the authors and do not necessarily reflect
# those of the United States Department of State.
#
# Copyright 2016 - Raytheon BBN Technologies Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

import optparse
import subprocess
import sys

def parse_args():
    """
    parse the commandline
    """

    parser = optparse.OptionParser()

    parser.add_option("-n", "--name",
                       default="br0",
                       help="Network interface name of bridge; "
                            "defaults to br0.")

    parser.add_option("-f", "--firstinterface",
                      default="eth0",
                      help="First interface to form bridge; defaults to eth0.")

    parser.add_option("-s", "--secondinterface",
                      default="eth1",
                      help="Second interface to form bridge; defaults to eth1.")

    parser.add_option("--start",
                      default=False, action="store_true",
                      help="Start bridge")

    parser.add_option("--stop",
                      default=False, action="store_true",
                      help="Stop bridge")

    (opts, _args) = parser.parse_args()

    if opts.start == True and opts.stop == True:
        print "ERROR: can't start and stop bridge"
        sys.exit(1)

    if opts.start == False and opts.stop == False:
        print "ERROR: must either start or stop the bridge"
        sys.exit(1)

    return opts

def start_bridge(opts):

    try:
        cmd = "brctl addbr %s" % (opts.name)
        subprocess.check_call(cmd, shell=True)
    except:
        print "failed to create bridge %s" % (opts.name)
        return False

    try:
        cmd = "brctl addif %s %s" % (opts.name, opts.firstinterface)
        subprocess.check_call(cmd, shell=True)
    except:
        print "failed to add interface %s to bridge %s" % (
                  opts.firstinterface, opts.name)
        return False

    try:
        cmd = "brctl addif %s %s" % (opts.name, opts.secondinterface)
        subprocess.check_call(cmd, shell=True)
    except:
        print "failed to add interface %s to bridge %s" % (
                  opts.secondinterface, opts.name)
        return False

    try:
        cmd = "ifconfig %s up" % (opts.name)
        subprocess.check_call(cmd, shell=True)
    except:
        print "failed to bring up bridge %s" % (opts.name)
        return False

    return True

def stop_bridge(opts):

    # Sometimes we'll try to stop and delete a bridge that doesn't exist,
    # or that isn't up, or that is already partially deleted, which will
    # cause parts of this process to fail.  So even if parts of the
    # process fail, we continue on, to the bitter end.

    try:
        cmd = "ifconfig %s down" % (opts.name)
        subprocess.check_call(cmd, shell=True)
    except:
        print "warning: failed to bring down bridge %s" % (opts.name)

    try:
        cmd = "brctl delif %s %s" % (opts.name, opts.firstinterface)
        subprocess.check_call(cmd, shell=True)
    except:
        print "warning: failed to delete interface %s from bridge %s" % (
                  opts.firstinterface, opts.name)

    try:
        cmd = "brctl delif %s %s" % (opts.name, opts.secondinterface)
        subprocess.check_call(cmd, shell=True)
    except:
        print "warning: failed to delete interface %s from bridge %s" % (
                  opts.secondinterface, opts.name)

    try:
        cmd = "brctl delbr %s" % (opts.name)
        subprocess.check_call(cmd, shell=True)
    except:
        print "warning: failed to delete bridge %s" % (opts.name)


def main():

    opts = parse_args()

    if opts.start == True:
        success = start_bridge(opts)
        if success == True:
            print "bridge %s successfully created with interfaces %s and %s" % (
                      opts.name, opts.firstinterface, opts.secondinterface)
            return
 
    print "Stopping bridge %s with interfaces %s and %s" % (
              opts.name, opts.firstinterface, opts.secondinterface)   
    stop_bridge(opts)

if __name__ == '__main__':
    exit(main())
