#!/usr/bin/env python
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contract No. N66001-11-C-4017 and in
# part by a grant from the United States Department of State.
# The opinions, findings, and conclusions stated herein are those
# of the authors and do not necessarily reflect those of the United
# States Department of State.
#
# Copyright 2014-2016 - Raytheon BBN Technologies Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.


"""
Runs the DR software (both click and the dr2dp code)
"""

import atexit
import logging
import optparse
import os
import os.path
import re
import shlex
import signal
import socket
import subprocess
import sys
import threading
import time

# The directory that this executable lives in.
#
DIRNAME = os.path.normpath(
        os.path.abspath(os.path.dirname(sys.argv[0]) or '.'))

sys.path.append(os.path.normpath(os.path.join(DIRNAME, '..', 'python')))

import cb.util.cblogging_setup

import cb.util.unbuffered
cb.util.unbuffered.unbuffer()

import cb.util.cblogging

from twisted.internet import epollreactor
epollreactor.install()
from twisted.internet import reactor

from cb.dr2dp.dr2dp_dr import DR2DP_DR, DR2DPS_DR
import cb.util.interface as interface

from cb.util.proc_watcher import ProcWatcher, ProcWatcherHelper

CLICK_EXE = os.path.join('/', 'usr', 'local', 'bin', 'click')

def parse_args():
    parser = optparse.OptionParser()

    click_script = os.path.normpath(
            os.path.join(DIRNAME, 'decoy-router.click'))

    parser.add_option("-d", "--decoyproxy",
                      default="dp:4001",
                      help="Proxy server host:port [default=%default].",
                      metavar="IPADDR:PORT")

    parser.add_option("-i", "--iface",
                      default="eth0",
                      help="Interface to listen on for client->decoy packets"
                           " [default=%default].")

    parser.add_option("-r", "--riface",
                      default="eth1",
                      help="Interface to listen on for decoy->client packets"
                           " [default=%default].")

    parser.add_option("-u", "--upstream_neighbor",
                      default="10.0.1.1",
                      metavar="IPADDR",
                      help="IP address of upstream neighbor to be used as"
                           " source of UDP notifications"
                           " [default=%default].")

    parser.add_option("--socket",  default="/tmp/curveball",
                      metavar="FILENAME",
                      help="Unix domain socket between DR2DP and Click "
                           "[default=%default].")

    parser.add_option("--stat_interval",
                      default=1,
                      metavar="SEC",
                      help="Interval in seconds to print packet statistics "
                           "[default=%default].")

    parser.add_option("--disable_segments",
                      action="store_true",
                      default=False,
                      help="Disable segmented flow processing.")

    parser.add_option("--max_idle",
                      default=10,
                      metavar="COUNT",
                      help="Number of intervals of zero incoming packets "
                           "allowed before shutting down the DR.  If zero, "
                           "no check is made"
                           "[default=%default].")

    parser.add_option("-s", "--click_script",
                      metavar="FILENAME",
                      default=click_script,
                      help="Click decoy router configuration script; "
                           "default = [%default]")

    (opts, args) = parser.parse_args()

    if opts.stat_interval < 0:
        print "ERROR: stat_interval must be >= 0"
        sys.exit(1)

    if opts.max_idle < 0:
        print "ERROR: max_idle must be >= 0"
        sys.exit(1)

    return opts

def _get_addr_from_route(route):
    # IPv4 only.
    out = route.split('\n')[0].strip()
    addr_re = 'src ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'
    m = re.search(addr_re, out)
    assert(m)
    return m.group(1)

# not currently used with DR in bridge mode
def get_dr_client_addr( client_name ):
    """ The DR needs to know the IP address of the interface that it uses
    to reach the client.  This is the interface that it monitors. """

    try:
        socket.gethostbyname(client_name)
    except:
	print "ERROR: No IP address for --clientname %s" % client_name
        sys.exit(1)
    proc = subprocess.Popen('ip route get %s' % socket.gethostbyname(client_name),
                                 shell=True, stdout=subprocess.PIPE)
    (out,_) = proc.communicate()
    addr = _get_addr_from_route(out)
    return addr

# not currently used with DR in bridge mode
def get_dr_decoy_addr( decoy_name ):
    """ The DR needs to know the IP address of the interface that it uses
        to reach the decoy. This is an interface that it monitors. """

    try:
        socket.gethostbyname(decoy_name)
    except:
	print "ERROR: No IP address for --decoyname %s" % decoy_name
        sys.exit(1)

    proc = subprocess.Popen('ip route get %s' % socket.gethostbyname(decoy_name),
                            shell=True, stdout=subprocess.PIPE)
    (out,_) = proc.communicate()
    addr = _get_addr_from_route(out)
    return addr

class ClickWatcherHelper(ProcWatcherHelper):

    def __init__(self):
        super(ClickWatcherHelper, self).__init__()

        self.logger = logging.getLogger('cb.cb-dr')

    def exited(self, proc, exit_code):

        print('CLICK exited with code %d' % exit_code)
        self.logger.warn('click exited (with code %d)' % exit_code)
        reactor.stop()
        sys.exit(1)


def run_click(opts, num_proxies):
    # Start the click router

    iface = "netmap:" + opts.iface
    riface = "netmap:" + opts.riface

    print "Using %s to capture client->decoy packets" % iface
    print "Using %s to capture decoy->client packets" % riface

    if iface == riface:
	print "ERROR: iface and riface must be different"
	sys.exit(1)

    try:
        try:
            write_config_script = os.path.normpath(
                os.path.join(DIRNAME, 'write-click-config'))
            cmd = "%s %s %s" % (
                    write_config_script, str(num_proxies), opts.click_script)
            subprocess.check_call(cmd, shell=True)
        except BaseException, exc:
            print "ERROR: failed to create decoy router click configuration"
            print "ERROR: %s" % str(exc)
            sys.exit(1)

        # turn generic receive offload to off on client-side interface
        try:
            cmd = "ethtool -K %s gro off" % (opts.iface)
            subprocess.check_call(cmd, shell=True)
        except:
            print "failed to turn gro off on interface %s" % (opts.iface)
            sys.exit(1)

        # turn generic receive offload to off on decoy-side interface
        try:
            cmd = "ethtool -K %s gro off" % (opts.riface)
            subprocess.check_call(cmd, shell=True)
        except:
            print "failed to turn gro off on interface %s" % (opts.riface)
            sys.exit(1)

        cmd = "%s -j 2 %s FORWARD_DEV=%s REVERSE_DEV=%s UDP_SRC_ADDR=%s PATH=\'%s\' STAT_INTERVAL=%s MAX_ZERO_INTERVAL=%s" % (
                CLICK_EXE, opts.click_script, iface, riface,
                opts.upstream_neighbor, opts.socket, opts.stat_interval,
                opts.max_idle)

        if opts.disable_segments:
            cmd += " DISABLE_SEGMENTS=true"

        click_proc = subprocess.Popen(cmd, shell=True)
        ProcWatcher(click_proc, ClickWatcherHelper())
        time.sleep(3)

    except OSError, e:
        self.logger.error('failed to start click')
        print "Failed to execute click"
        sys.exit(1)

def handle_signals(signum, frame):
    """
    Cleanup and exit with an error status.

    Used by signal handlers
    """

    print 'Stopping due to signal %d' % signum

    try:
        reactor.stop()
    except:
        cleanup()
        try:
            sys.exit(1) 
        except:
            pass

def cleanup():
    """
    Cleanup and exit.

    Make sure that the dr's didn't leave any state behind:
    click processes and/or iptables rules.
    """

    cb_cleanup_dr = os.path.join(DIRNAME, 'cb-cleanup-dr')
    os.system(cb_cleanup_dr)

def main():
    opts = parse_args()

    signal.signal(signal.SIGHUP, handle_signals)
    signal.signal(signal.SIGINT, handle_signals)
    signal.signal(signal.SIGTERM, handle_signals)

    from cb.dr2dp.dr2dp_dr import DR2DP_DR

    print 'socket = %s' % opts.socket

    dp_locs = list()

    for dp_instance in opts.decoyproxy.split(','):
        (dp_addr, dp_port) = dp_instance.split(':')

        try:
            socket.gethostbyname(dp_addr)
            print "Using %s as decoyproxy host name" % (dp_addr)
        except:
            print "No IP address for decoy proxy named %s, exiting" % dp_addr
            sys.exit(1)

        dp_locs.append((dp_addr, int(dp_port)))

        num_proxies = len(dp_locs)

    # if there's only one entry in dp_locs, do things
    # the old-fashioned way.  Otherwise, use the new
    # multi-DP method (see below for more info)
    #
    if len(dp_locs) == 1:
        try:
            dp_loc = dp_locs[0]

            sock_name = '%s%d' % (opts.socket, 0)
            dr2dp_dr = DR2DP_DR(
                    dp_loc, sock_name, lambda: run_click(opts, num_proxies),
                    enable_watchers=True)
        except BaseException, exc:
            msg = str(exc)
            if msg:
                print 'ERROR starting DR: %s' % msg
            else:
                print 'ERROR starting DR'
            sys.exit(1)
    else:
        # If we have multiple DPs, then we create a DR2DP_DR
        # instance for each one, and the name of the socket is
        # changed for each.
        #
        # The last DR2DP_DR we create is special: it is the one
        # that actually starts click when it achieves a connection.
        # We'd like to wait a moment before starting this one,
        # in order to give the system some time to start up,
        # but twisted doesn't make it obvious how to do that.
        # (TODO: this is lame).

        sock_num = 0
        for dp_loc in dp_locs[:-1]:
            sock_name = '%s%d' % (opts.socket, sock_num)
            print 'creating DR2DP for %s at %s' % (str(dp_loc), sock_name)
            dr2dp_dr = DR2DP_DR(dp_loc, sock_name, None)

            sock_num += 1

        # try to make sure all the DP connections except the last
        # one are ready prior to starting the DR
        #
        time.sleep(1)

        dp_loc = dp_locs[-1]
        sock_name = '%s%d' % (opts.socket, sock_num)
        print 'creating DR2DP for %s at %s' % (str(dp_loc), sock_name)
        dr2dp_dr = DR2DP_DR(
                dp_loc, sock_name, lambda: run_click(opts, num_proxies),
                enable_watchers=True)

    print "DR Running" # experiment scripts expect to see this

    try:
        status = 0
        reactor.run()
    except BaseException, exc:
        status = 1

    print 'DR exiting'
    cleanup()
    sys.exit(status)

if __name__ == '__main__':

    #  No longer needed. cb-noc-cron-dr deprecated. cbnoc-keymanager
    #  run via cron
    #
    # if socket.getfqdn() == 'romeo.nct.bbn.com':
    #     SETUP_SCRIPT = '/etc/cron.hourly/cb-noc-cron-dr'
    #     if not os.path.exists(SETUP_SCRIPT):
    #         print 'ERROR: setup script %s missing' % SETUP_SCRIPT
    #         exit(1)

    #     os.system(SETUP_SCRIPT)

    exit(main())
