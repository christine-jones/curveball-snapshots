#!/bin/sh
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contract No. N66001-11-C-4017 and in
# part by a grant from the United States Department of State.
# The opinions, findings, and conclusions stated herein are those
# of the authors and do not necessarily reflect those of the United
# States Department of State.
#
# Copyright 2014-2016 - Raytheon BBN Technologies Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.

# NOTE: when you invoke this script, you must either have the directory
# where this script lives in your path, or you must invoke this script
# with the full path to its location (typically
# /opt/curveball/scripts/cb-dp-cron or
# $HOME/curveball/build/scripts/cb-dp-cron)

# The MODE can be 'dp', 'dr', or 'all'.  If the mode is 'dr', then just
# the dr files are copied; if 'dp' then just the dp files are copied; if
# 'all' then both the dr and dp files are copied into place.
#
# The NUMSENTINELS is the number of sentinels created per hour.  This
# is currently a system-wide constant, although ideally it would be
# tied to each each key.
#
# NOTE: NUMSENTINELS must be at least as large as the constant in
# cb.sentman.keystate.DEFAULT_SENTINELS_PER_EPOCH, but there's no
# convenient way to sanity-check this here.
#
# NUMHOURS is how many hours worth of sentinels to prepare in the future.
# Make sure to run this script before that many hours have elapsed, or
# else the system will not have sentinel files and/or Bloom filter files
# in time for the DP or DR to load.
#
# TEMPDIR is where to cache the files created by this script between runs.
# Keeping these files can greatly reduce the amount of work that the script
# does during each invocation.  The default is to put this in the users
# home directory.
#

DEFMODE="all"
DEFNUMSENTINELS=1024
DEFNUMHOURS=4
DEFTEMPDIR="${HOME}/cb-out"

DP_DEST_DIR=/tmp/dp/sentinels
DR_DEST_DIR=/tmp/dr/bloomfilters

SENT_SUFFIX=sent
SENT_BF_SUFFIX=sbf

CP=/bin/cp
MV=/bin/mv
MKDIR=/bin/mkdir

# logging/diagnostic functions
SCRIPTNAME=$(basename "$0")
log() { printf '%s: %s\n' "${SCRIPTNAME}" "$*"; }
error() { log "ERROR: $*" >&2; }
fatal() { error "$*"; exit 1; }
usage_fatal() { error "$*"; usage >&2; exit 1; }

SCRIPTDIR=$(/bin/readlink -f $(/usr/bin/dirname $(/usr/bin/which "$0")))
CREATESENTINELS=$(/bin/readlink -f "${SCRIPTDIR}/cb-noc-create-sentinel-files")

# If the default key file is missing, then assume that we might be running
# out of the development directory.
#
DEFKEYFILE=$(/bin/readlink -f "${SCRIPTDIR}/../auth/keys/keys_short")
if [ $? -ne 0 ]; then
    DEFKEYFILE=$(/bin/readlink -f "${SCRIPTDIR}/../test/auth/keys/keys_short")
fi

usage() {

    cat <<.

    Usage: $0 [options]

    -k PATH The path to the keyfile.  The default is
	    $DEFKEYFILE.

    -l NUM  The number of hours for which to create sentinels.
	    The default is $DEFNUMHOURS.

    -n NUM  The number of sentinels to create per hour.  The default is
	    $DEFNUMSENTINELS.

    -m MODE The mode in which to run.  If MODE is 'dp', then create the
	    files needed by the Decoy Proxy; if MODE is 'dr', then create
	    create the files needed by the Decoy Proxy; if MODE is 'all',
	    install all of the files neede by both the Decoy Proxy and
	    Decoy Router.  The default is $DEFMODE.

    -o      Overwrite existing files generated for the current hours,
            if any.

    -r      Remove all files from previous runs before starting.

    -t DIR  The directory in which to store files between runs.  The default
	    is $DEFTEMPDIR.

.
}


# A trick to figure out whether a string is a number: if it's -eq to
# itself, then it is; otherwise the conversion to a number failed.
#
is_integer() {
    if [ "$1" -eq "$1" 2> /dev/null ]; then
	return 0
    else
	return 1
    fi
}

is_pos_integer() {
    if [ "$1" -gt 0 2> /dev/null ]; then
	return 0
    else
	return 1
    fi
}

# copy over the files needed by a Decoy Proxy into the directory
# where cb-dp will look for them.
#
push_local_dp() {

    ${MKDIR} -p ${DP_DEST_DIR}
    if [ $? -ne 0 ]; then
      fatal "cannot create [${DR_DEST_DIR}] for DP files"
    fi

    start_dir=$(pwd)

    cd "${TEMPDIR}"
    for sentfile in *.${SENT_SUFFIX}; do
	target="${DP_DEST_DIR}/${sentfile}"
	tmp_target="${target}.tmp"

	if [ ! -f "${target}" ]; then
	    "${CP}" "${sentfile}" "${tmp_target}"
	    if [ $? -ne 0 ]; then
		fatal "cannot copy files to ${DP_DEST_DIR}"
	    fi

	    "${MV}" "${tmp_target}" "${target}"
	    if [ $? -ne 0 ]; then
		fatal "cannot rename files to ${DP_DEST_DIR}"
	    fi
	fi
    done

    cd "${start_dir}"
}

# copy over the files needed by a Decoy Proxy into the directory
# where cb-dr will look for them.
#
push_local_dr() {

    ${MKDIR} -p ${DR_DEST_DIR}
    if [ $? -ne 0 ]; then
	fatal "cannot create directory [${DR_DEST_DIR}] for DR files"
    fi

    start_dir=$(pwd)

    cd "${TEMPDIR}"
    for sbffile in *.${SENT_BF_SUFFIX}; do
	target="${DR_DEST_DIR}/${sbffile}"
	tmp_target="${target}.tmp"

	if [ ! -f "${target}" ]; then
	    "${CP}" "${sbffile}" "${tmp_target}"
	    if [ $? -ne 0 ]; then
		fatal "cannot copy files to ${DR_DEST_DIR}"
	    fi

	    "${MV}" "${tmp_target}" "${target}"
	    if [ $? -ne 0 ]; then
		fatal "cannot rename files to ${DR_DEST_DIR}"
	    fi
	fi
    done

    cd "${start_dir}"
}

remove_temp_files() {
    if [ -d "${TEMPDIR}" ]; then
	echo ${TEMPDIR}
	/bin/rm -f ${TEMPDIR}/*
    fi
}

remove_dp_files() {
    if [ -d "${DP_DEST_DIR}" ]; then
	echo ${DP_DEST_DIR}
	/bin/rm -f ${DP_DEST_DIR}/*
    fi
}

remove_dr_files() {
    if [ -d "${DR_DEST_DIR}" ]; then
	echo ${DR_DEST_DIR}
	/bin/rm -f ${DR_DEST_DIR}/*
    fi
}

OVERWRITE=0
REMOVE_FILES=0
NUMSENTINELS=${DEFNUMSENTINELS}
NUMHOURS=${DEFNUMHOURS}
KEYFILE=${DEFKEYFILE}
TEMPDIR=${DEFTEMPDIR}
MODE=${DEFMODE}

while getopts "hk:l:m:n:ort:" opt; do
    case $opt in
	h)
	    usage
	    exit 1
	    ;;
	k)
	    KEYFILE="$OPTARG"
	    ;;
	l)
	    NUMHOURS="$OPTARG"
	    ;;
	m)
	    MODE="$OPTARG"
	    ;;
	n)
	    NUMSENTINELS="$OPTARG"
	    ;;
	o)
	    OVERWRITE=1
	    ;;
	r)
	    REMOVE_FILES=1
	    ;;
	t)
	    TEMPDIR="$OPTARG"
	    ;;
    esac
done

case ${MODE} in
    dp|dr|all)
	;;
    *)
	usage_fatal "MODE must be one of 'dr', 'dp', or 'all'"
	;;
esac

KEYFILE=$(/bin/readlink -f "${KEYFILE}")
if [ ! -r "${KEYFILE}" ]; then
    fatal "keyfile [$KEYFILE] missing or unreadable."
    exit 1
fi

if ! is_pos_integer "${NUMSENTINELS}" ; then
    usage_fatal "number of sentinels must be a integer greater than 0"
fi

if ! is_pos_integer "${NUMHOURS}" ; then
    usage_fatal "number of hours must be a integer greater than 0"
fi

if [ ! -d "${TEMPDIR}" ]; then
    mkdir "${TEMPDIR}"
    if [ ! -d "${TEMPDIR}" ]; then
	fatal "working directory [${TEMPDIR}] cannot be created"
    fi
fi

ARGS=""
if [ "$OVERWRITE" -eq 0 ]; then
    ARGS="$ARGS --safe-mode"
fi
ARGS="$ARGS --outdir ${TEMPDIR}"
ARGS="$ARGS --sentinels ${NUMSENTINELS}"
ARGS="$ARGS --hours ${NUMHOURS}"
ARGS="$ARGS ${KEYFILE}"

if [ $REMOVE_FILES -ne 0 ]; then
    remove_temp_files
    remove_dr_files
    remove_dp_files
fi

$CREATESENTINELS $ARGS 

if [ "$MODE" = "dr" ] || [ "$MODE" = "all" ]; then
    push_local_dr
fi
if [ "$MODE" = "dp" ] || [ "$MODE" = "all" ]; then
    push_local_dp
fi

# Now clean up anything that has aged out.
"${SCRIPTDIR}/cb-noc-rm-old" "${TEMPDIR}" .sbf
"${SCRIPTDIR}/cb-noc-rm-old" "${TEMPDIR}" .sent
"${SCRIPTDIR}/cb-noc-rm-old" "${DR_DEST_DIR}" .sbf
"${SCRIPTDIR}/cb-noc-rm-old" "${DP_DEST_DIR}" .sent


exit 0
