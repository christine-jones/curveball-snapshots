#!/usr/bin/env python
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contract No. N66001-11-C-4017.
#
# Copyright 2014 - Raytheon BBN Technologies Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.

import optparse
import os
import signal
import sys

# directory in which the executable is located
DIRNAME = os.path.normpath(os.path.abspath(os.path.dirname(sys.argv[0]) or '.'))

sys.path.append(os.path.normpath(os.path.join(DIRNAME, '..', 'python')))

import cb.util.unbuffered
cb.util.unbuffered.unbuffer()

from twisted.internet import reactor

from remora.server import RemoraServer

def parse_args():
    parser = optparse.OptionParser()

    default_whitelist = os.path.normpath(
            os.path.join(DIRNAME, 'remora-whitelist.txt'))
    default_blacklist = os.path.normpath(
            os.path.join(DIRNAME, 'remora-blacklist.txt'))

    default_state = os.path.normpath(
            os.path.join(DIRNAME, 'remora-state.p'))

    parser.add_option("-p", "--port",
            metavar="PORT",
            type=int,
            default="4003",
            help="server port; [default=%default]")

    parser.add_option("-i", "--interface",
            metavar="INTERFACE",
            default="eth0",
            help="outgoing interface on which to observe traffic; " +
                    "[default=%default]")

    parser.add_option("-w", "--whitelist", dest="whitelist",
            metavar="FILENAME",
            default=default_whitelist,
            help="decoy whitelist [default=%default]")

    parser.add_option("-b", "--blacklist", dest="blacklist",
            metavar="FILENAME",
            default=default_blacklist,
            help="decoy blacklist [default=%default]")

    parser.add_option("-s", "--statefile", dest="statefile",
            metavar="FILENAME",
            default=default_state,
            help="remora state file [default=%default]")

    (opts, args) = parser.parse_args()

    if opts.port < 1 or opts.port > 65535:
        print "ERROR: invalid port: %d" % opts.port
        sys.exit(1)

    return opts

def handle_signals(signum, frame):
    print "stopping due to signal %d" % signum

    try:
        reactor.stop()
    except:
        sys.exit(1)

    cleanup()

def cleanup():

    global REMORA_SERVER

    REMORA_SERVER.save_state()
    REMORA_SERVER.save_whitelist()
    REMORA_SERVER.save_blacklist()


REMORA_SERVER = None

def main():

    global REMORA_SERVER

    opts = parse_args()

    signal.signal(signal.SIGHUP,  handle_signals)
    signal.signal(signal.SIGINT,  handle_signals)
    signal.signal(signal.SIGTERM, handle_signals)

    try:
        REMORA_SERVER = RemoraServer(
            ('localhost', opts.port), opts.interface)

    except BaseException, exc:
        msg = str(exc)
        if msg:
            print "ERROR starting remora server: %s" % msg
        else:
            print "ERROR starting remora server"
        sys.exit(1)

    REMORA_SERVER.load_state(opts.statefile)
    REMORA_SERVER.load_whitelist(opts.whitelist)
    REMORA_SERVER.load_blacklist(opts.blacklist)

    print "remora server running..."

    try:
        status = 0
        reactor.run()
    except BaseException, exc:
        status = 1

    print "remora server exiting"
    sys.exit(status)

if __name__ == '__main__':
    exit(main())
